//@version=5
indicator("All-in-One Indicator (v5)", shorttitle="AIO v5", overlay=false)

//==============================================================================
// GLOBAL FUNCTIONS & METHODS
//==============================================================================

// --- Oscillator Functions ---
osc_PhiSmoother(series float source, simple int length, simple float phase) =>
    var array<float> coefs = na
    var int length_1 = length - 1
    var float W = 0.0
    if na(coefs)
        coefs := array.new<float>()
        const float SQRT_PIx2 = math.sqrt(2.0 * math.pi)
        const float MULTIPLIER = -0.5 / 0.93
        var float length_2 = length * 0.52353
        for i = 0 to length_1
            float alpha = (i + phase - length_2) * MULTIPLIER
            float beta = 1.0 / (0.2316419 * math.abs(alpha) + 1.0)
            float phi = (math.exp(math.pow(alpha, 2) * -0.5) * -0.398942280) * beta * (0.319381530 + beta * (-0.356563782 + beta * (1.781477937 + beta * (-1.821255978 + beta * 1.330274429)))) + 1.011
            if alpha < 0.0
                phi := 1.0 - phi
            float weight = phi / SQRT_PIx2
            coefs.push(weight)
            W += weight
    float sma2 = math.avg(source, nz(source[1], source))
    float E = 0.0
    for i = 0 to length_1
        E += coefs.get(i) * sma2[i]
    E / W

osc_ema(series float source, simple int length) =>
    float alpha = 2.0 / (length + 1)
    var float smoothed = na
    smoothed := alpha * source + (1.0 - alpha) * nz(smoothed[1], source)
    smoothed

osc_dema(series float source, simple int length) =>
    float ema1 = osc_ema(source, length)
    float ema2 = osc_ema(ema1, length)
    2.0 * ema1 - ema2

osc_tema(series float source, simple int length) =>
    float ema1 = osc_ema(source, length)
    float ema2 = osc_ema(ema1, length)
    float ema3 = osc_ema(ema2, length)
    (ema1 - ema2) * 3.0 + ema3

osc_wma(series float source, simple int length) =>
    float weight_sum = length * 0.5 * (length + 1)
    float sum = 0.0
    for i = 0 to length - 1
        sum += source[i] * (length - i)
    sum / weight_sum

osc_sma(series float source, simple int length) =>
    float sum = 0.0
    for i = 0 to length - 1
        sum += source[i]
    sum / length

osc_filter(series float source, simple int length, simple float phase, simple string style) =>
    if length > 1
        switch style
            "PhiSmoother" => osc_PhiSmoother(source, length, phase)
            "EMA" => osc_ema(source, length)
            "DEMA" => osc_dema(source, length)
            "TEMA" => osc_tema(source, length)
            "WMA" => osc_wma(source, length)
            => osc_sma(source, length)
    else
        source

method osc_get_score(series array<float> source) =>
    array<float> scores = array.new<float>()
    for i = 0 to source.size() - 1
        float current = source.get(i)
        int score_sum = 0
        for j = 0 to source.size() - 1
            float check = source.get(j)
            int polarity = i < j ? 1 : -1
            if i != j
                if current > check
                    score_sum += polarity
                else
                    score_sum -= polarity
        scores.push(score_sum)
    scores

method osc_net_score_func(series array<float> scores) =>
    int value = scores.size() - 1
    float netScore = ((scores.avg() + value) / (value * 2.0) - 0.5) * 200.0
    netScore

// --- VWAP Z-Score Functions ---
zscore_calc_zvwap_enhanced(periods) =>
    vw_mean = ta.vwma(close, periods)
    vw_sd = math.sqrt(ta.sma(math.pow(close - vw_mean, 2), periods))
    vwapz = (close - vw_mean) / vw_sd
    vwapz

// --- Standard Deviation Volatility Helper Functions & Types ---
type stddev_VolatilityBands
    float upper
    float lower

stddev_f_historicalVolatility(len) =>
    float logReturns = math.log(close / close[1])
    ta.stdev(logReturns, len)

stddev_f_volatilityBands(src, volatility, period) =>
    float expFactor = math.exp(volatility * math.sqrt(period))
    stddev_VolatilityBands.new(upper = src * math.pow(expFactor, 3), lower = src / math.pow(expFactor, 3))

//==============================================================================
// INPUTS
//==============================================================================

// --- Master Toggles ---
string master_group = "--- MASTER ON/OFF SWITCHES ---"
bool show_oscillator = input.bool(true, "Show Oscillator", group = master_group, inline = "1")
bool show_vwap_zscore = input.bool(true, "Show VWAP Z-Score", group = master_group, inline = "1")
bool show_stddev_helper = input.bool(true, "Show StdDev Volatility Helper", group = master_group, inline = "1")

// --- Oscillator Inputs ---
string osc_group = "--- OSCILLATOR SETTINGS ---"
string osc_common_group = osc_group + " - Common Controls"
float osc_source = input.source(close, "Source", group=osc_common_group)
string osc_mode = input.string("Trend Strength", "Composite Cluster Mode", group=osc_common_group, options=["Trend Strength", "Volatility"])
string osc_filter_type = input.string("PhiSmoother", "Cluster Filter", group=osc_common_group, options=["PhiSmoother", "EMA", "DEMA", "TEMA", "WMA", "SMA"])
float osc_phase = input.float(3.7, "PhiSmoother Phase", group=osc_common_group, minval=0.0, step=0.1)

string osc_cluster_group = osc_group + " - Cluster Options"
int osc_spacing = input.int(3, "Cluster Dispersion", group=osc_cluster_group, minval=1, maxval=10)
int osc_upper_trim = input.int(0, "Cluster Trim - Upper:", group=osc_cluster_group, inline="trim", minval=0, maxval=31)
int osc_lower_trim = input.int(0, "Lower:", group=osc_cluster_group, inline="trim", minval=0, maxval=31)

string osc_output_group = osc_group + " - Composite Post Smoothing"
string osc_post_smooth_filt = input.string("PhiSmoother", "PostSmooth - Filter:", group=osc_output_group, inline="post", options=["PhiSmoother", "EMA", "DEMA", "TEMA", "WMA", "SMA"])
int osc_post_smooth_len = input.int(1, "Length:", group=osc_output_group, inline="post", minval=1)

string osc_signal_group = osc_group + " - Composite Signal Settings"
string osc_signal_filter = input.string("PhiSmoother", "Signal - Filter:", group=osc_signal_group, inline="signal", options=["PhiSmoother", "EMA", "DEMA", "TEMA", "WMA", "SMA"])
int osc_signal_length = input.int(20, "Length:", group=osc_signal_group, inline="signal", minval=1)
color osc_signal_color = input.color(color.new(color.green, 0), "Filter Color", group=osc_signal_group)

string osc_threshold_group = osc_group + " - Threshold Levels"
float osc_upperLevel = input.float(75.0, "Levels - Upper:", group=osc_threshold_group, inline="level", minval=1.0, maxval=99.0, step=2.0)
float osc_lowerLevel = input.float(-75.0, "Lower:", group=osc_threshold_group, inline="level", minval=-99.0, maxval=-1.0, step=2.0)

string osc_colors_group = osc_group + " - Coloring Preferences"
float osc_transition_easing = input.float(50.0, "Transition Easing", group=osc_colors_group, maxval=100.0, minval=0.0, step=5.0)
bool osc_fill_bg = input.bool(true, "Fill Background", group=osc_colors_group, inline="fill")
int osc_fill_alpha = input.int(85, "", group=osc_colors_group, inline="fill", minval=0, maxval=100)
color osc_rising_bullish = input.color(#FFCC00, "Bullish Color", group=osc_colors_group, inline="bull")
color osc_rising_transition = input.color(#9598A1, "Transition Color", group=osc_colors_group, inline="range")
color osc_falling_bearish = input.color(#5500CC, "Bearish Color", group=osc_colors_group, inline="bear")

// --- VWAP Z-Score Inputs ---
string zscore_group = "--- VWAP Z-SCORE SETTINGS ---"
int zscore_len = input.int(20, title="VWAP Z-Score Length", group=zscore_group)
float zscore_upper_top = input.float(3.0, title="Upper Threshold Top", group=zscore_group)
float zscore_upper_bottom = input.float(2.5, title="Upper Threshold Bottom", group=zscore_group)
float zscore_lower_top = input.float(-3.0, title="Lower Threshold Top", group=zscore_group)
float zscore_lower_bottom = input.float(-2.5, title="Lower Threshold Bottom", group=zscore_group)
bool zscore_showSignals = input.bool(true, title="Show Reversal Signals", group=zscore_group)
color zscore_color_above_zero = input.color(color.new(#7FFF00, 0), title="Line Color ", inline="visual", group=zscore_group)
color zscore_color_below_zero = input.color(color.new(#FF00FF, 0), title=" ", inline="visual", group=zscore_group)
string zscore_buy_symbol = input.string("ðŸ”¼", "Buy Symbol", options=["ðŸ”¼", "BULL", "AGRESSIVE BULL"], group=zscore_group)
string zscore_sell_symbol = input.string("ðŸ”½", "Sell Symbol", options=["ðŸ”½", "BEAR", "AGRESSIVE BEAR"], group=zscore_group)

// --- Standard Deviation Volatility Helper Inputs ---
string stddev_group = "--- STDDEV VOLATILITY HELPER SETTINGS ---"
source stddev_sdSrc = input.source(close, "Standard Deviation Source", group=stddev_group)
int stddev_sdPeriod = input.int(1, "Standard Deviation Period", group=stddev_group, minval=1)
int stddev_sdLength = input.int(30, "Standard Deviation Length", group=stddev_group, minval=1)
bool stddev_smoothEma = input.bool(false, "Enable EMA Smoothing?", group=stddev_group)
int stddev_emaLength = input.int(20, "EMA Smoothing Length", group=stddev_group, minval=1)

//==============================================================================
// MAIN SCRIPT LOGIC
//==============================================================================

// --- Oscillator Logic ---
if show_oscillator
    var OSC_VOLATILITY_MODE_ON = osc_mode == "Volatility"

    osc_filter_cluster = array.new_float(34)
    array.set(osc_filter_cluster, 0, osc_source)
    for i = 1 to 33
        array.set(osc_filter_cluster, i, osc_filter(osc_source, i * osc_spacing, osc_phase, osc_filter_type))

    if osc_upper_trim > 0
        for i = 0 to math.min(osc_upper_trim - 1, array.size(osc_filter_cluster) - 1)
            if array.size(osc_filter_cluster) > 2
                array.shift(osc_filter_cluster)
            else
                break
    if osc_lower_trim > 0
        for i = 0 to math.min(osc_lower_trim - 1, array.size(osc_filter_cluster) - 1)
            if array.size(osc_filter_cluster) > 2
                array.pop(osc_filter_cluster)
            else
                break

    osc_ribbon_max = array.max(osc_filter_cluster)
    osc_ribbon_min = array.min(osc_filter_cluster)
    osc_ribbon_width = osc_ribbon_max - osc_ribbon_min
    osc_ribbon_rank = OSC_VOLATILITY_MODE_ON ? nz(osc_ribbon_width / math.avg(osc_ribbon_max, osc_ribbon_min)) : 1

    osc_score_arr = osc_filter_cluster.osc_get_score()
    osc_net_score = osc_filter(osc_score_arr.osc_net_score_func() * osc_ribbon_rank, osc_post_smooth_len, 3.7, osc_post_smooth_filt)
    osc_signal_value = osc_signal_length < 2 ? na : osc_filter(ta.sma(osc_net_score, 2), osc_signal_length, 3.7, osc_signal_filter)

    osc_top = hline(OSC_VOLATILITY_MODE_ON ? na : 100.0, "Top", color.red)
    osc_upper = hline(OSC_VOLATILITY_MODE_ON ? na : osc_upperLevel, "+Level", osc_rising_bullish, hline.style_dotted, 2)
    osc_center = hline(0.0, "Center", color.gray)
    osc_lower = hline(OSC_VOLATILITY_MODE_ON ? na : osc_lowerLevel, "+Level", osc_falling_bearish, hline.style_dotted, 2)
    osc_bottom = hline(OSC_VOLATILITY_MODE_ON ? na : -100.0, "Bottom", color.green)

    osc_invisible = color.new(color.black, 100)
    fill(osc_top, osc_upper, color.new(color.red, 80))
    fill(osc_center, osc_upper, color.new(osc_rising_bullish, osc_fill_bg ? osc_fill_alpha : 100))
    fill(osc_center, osc_lower, color.new(osc_falling_bearish, osc_fill_bg ? osc_fill_alpha : 100))
    fill(osc_bottom, osc_lower, color.new(color.green, 80))

    osc_color1 = osc_net_score > osc_signal_value ? color.green : color.red

    plot(osc_net_score, "Score", osc_color1, 3)
    plot(osc_signal_value, "Signal", osc_signal_color, 1)

// --- VWAP Z-Score Logic ---
if show_vwap_zscore
    zscore_zvwap_val = zscore_calc_zvwap_enhanced(zscore_len)

    plot(zscore_upper_top, "Overbought High", color.new(color.red, 100))
    plot(zscore_upper_bottom, "Overbought Low", color.new(color.red, 100))
    plot(zscore_lower_top, "Oversold High", color.new(color.green, 100))
    plot(zscore_lower_bottom, "Oversold Low", color.new(color.green, 100))

    plot(zscore_zvwap_val, "ZVWAP", zscore_zvwap_val >= 0 ? zscore_color_above_zero : zscore_color_below_zero, 2)

    zscore_alert_condition_up = zscore_zvwap_val > zscore_upper_bottom
    zscore_alert_condition_down = zscore_zvwap_val < zscore_lower_bottom

    plotshape(zscore_alert_condition_down and zscore_showSignals, "Support Signal", shape.labelup, location.absolute, color.green, zscore_zvwap_val - 1.2, text=zscore_buy_symbol, textcolor=color.white)
    plotshape(zscore_alert_condition_up and zscore_showSignals, "Resistance Signal", shape.labeldown, location.absolute, color.red, zscore_zvwap_val + 0.3, text=zscore_sell_symbol, textcolor=color.white)

    alertcondition(zscore_alert_condition_down, "VWAP Z-Score Buy", "ZVWAP crossed above resistance")
    alertcondition(zscore_alert_condition_up, "VWAP Z-Score Sell", "ZVWAP crossed below support")

// --- Standard Deviation Volatility Helper Logic ---
if show_stddev_helper
    stddev_volatility = stddev_f_historicalVolatility(stddev_sdLength)
    stddev_bands = stddev_f_volatilityBands(stddev_sdSrc, stddev_volatility, stddev_sdPeriod)

    stddev_volOsc = ta.stoch(close, stddev_bands.upper, stddev_bands.lower, stddev_sdLength)

    stddev_volOscSmoothed = ta.ema(stddev_volOsc, stddev_emaLength)
    stddev_output = stddev_smoothEma ? stddev_volOscSmoothed : stddev_volOsc

    plot(stddev_output, "Volatility Oscillator", color.rgb(0, 160, 255), 2)
    hline(80, "Overbought", color.new(color.red, 20), hline.style_dashed)
    hline(50, "Neutral", color.new(color.gray, 40))
    hline(20, "Oversold", color.new(color.green, 20), hline.style_dashed)

    alertcondition(stddev_output > 80, "Overbought Alert", "Oscillator entered overbought territory (>80)")
    alertcondition(stddev_output < 20, "Oversold Alert", "Oscillator entered oversold territory (<20)")
