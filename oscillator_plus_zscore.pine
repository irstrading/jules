//@version=5
indicator("Oscillator + VWAP Z-Score", shorttitle="Osc+ZScore", overlay=false)

//==============================================================================
// GLOBAL FUNCTIONS & METHODS
//==============================================================================

// --- Oscillator Functions ---
osc_PhiSmoother(series float source, simple int length, simple float phase) =>
    var array<float> coefs = na
    var int length_1 = length - 1
    var float W = 0.0
    if na(coefs)
        coefs := array.new<float>()
        const float SQRT_PIx2 = math.sqrt(2.0 * math.pi)
        const float MULTIPLIER = -0.5 / 0.93
        var float length_2 = length * 0.52353
        for i = 0 to length_1
            float alpha = (i + phase - length_2) * MULTIPLIER
            float beta = 1.0 / (0.2316419 * math.abs(alpha) + 1.0)
            float phi = (math.exp(math.pow(alpha, 2) * -0.5) * -0.398942280) * beta * (0.319381530 + beta * (-0.356563782 + beta * (1.781477937 + beta * (-1.821255978 + beta * 1.330274429)))) + 1.011
            if alpha < 0.0
                phi := 1.0 - phi
            float weight = phi / SQRT_PIx2
            coefs.push(weight)
            W += weight
    float sma2 = ta.sma(source, 2)
    float E = 0.0
    for i = 0 to length_1
        E += coefs.get(i) * sma2[i]
    E / W

osc_ema(series float source, simple int length) =>
    float alpha = 2.0 / (length + 1)
    var float smoothed = 0.0
    smoothed := alpha * source + (1.0 - alpha) * nz(smoothed[1], source)
    smoothed

osc_dema(series float source, simple int length) =>
    float ema1 = osc_ema(source, length)
    float ema2 = osc_ema(ema1, length)
    2.0 * ema1 - ema2

osc_tema(series float source, simple int length) =>
    float ema1 = osc_ema(source, length)
    float ema2 = osc_ema(ema1, length)
    float ema3 = osc_ema(ema2, length)
    (ema1 - ema2) * 3.0 + ema3

osc_wma(series float source, simple int length) =>
    float weight_sum = length * 0.5 * (length + 1)
    float sum = 0.0
    for i = 0 to length - 1
        sum += source[i] * (length - i)
    sum / weight_sum

osc_sma(series float source, simple int length) =>
    ta.sma(source, length)

osc_filter(series float source, simple int length, simple float phase, simple string style) =>
    if length > 1
        switch style
            "PhiSmoother" => osc_PhiSmoother(source, length, phase)
            "EMA" => osc_ema(source, length)
            "DEMA" => osc_dema(source, length)
            "TEMA" => osc_tema(source, length)
            "WMA" => osc_wma(source, length)
            => osc_sma(source, length)
    else
        source

method osc_get_score(series array<float> source) =>
    array<float> scores = array.new<float>()
    for i = 0 to source.size() - 1
        float current = source.get(i)
        int score_sum = 0
        for j = 0 to source.size() - 1
            float check = source.get(j)
            int polarity = i < j ? 1 : -1
            if i != j
                if current > check
                    score_sum += polarity
                else
                    score_sum -= polarity
        scores.push(score_sum)
    scores

method osc_net_score_func(series array<float> scores) =>
    int value = scores.size() - 1
    float netScore = ((scores.avg() + value) / (value * 2.0) - 0.5) * 200.0
    netScore

// --- VWAP Z-Score Functions ---
zscore_calc_zvwap_enhanced(periods) =>
    vw_mean = ta.vwma(close, periods)
    vw_sd = math.sqrt(ta.sma(math.pow(close - vw_mean, 2), periods))
    vwapz = (close - vw_mean) / vw_sd
    vwapz

//==============================================================================
// INPUTS
//==============================================================================

// --- Master Toggles ---
string master_group = "--- INDICATOR VISIBILITY ---"
bool show_main_oscillator = input.bool(true, "Show Main Oscillator", group = master_group, inline = "1")
bool show_zscore_indicator = input.bool(true, "Show VWAP Z-Score", group = master_group, inline = "1")

// --- Oscillator Inputs ---
string osc_group = "--- OSCILLATOR SETTINGS ---"
string osc_common_group = osc_group + " - Common Controls"
float  osc_source = input.source(           close,                 "Source", group=osc_common_group)
string   osc_mode = input.string("Trend Strength", "Composite Cluster Mode", group=osc_common_group, options=["Trend Strength", "Volatility"])
string osc_filter_type = input.string(   "PhiSmoother",         "Cluster Filter", group=osc_common_group, options=["PhiSmoother", "EMA", "DEMA", "TEMA", "WMA", "SMA"])
float   osc_phase = input.float (             3.7,   "PhiSmoother Phase", group=osc_common_group,  minval=0.0, step=0.1)

string osc_cluster_group = osc_group + " - Cluster Options"
int    osc_spacing = input.int(3,    "Cluster Dispersion", group=osc_cluster_group,                 minval=1, maxval=10)
int osc_upper_trim = input.int(0, "Cluster Trim - Upper:", group=osc_cluster_group, inline="trim",  minval=0, maxval=31)
int osc_lower_trim = input.int(0,              "Lower:", group=osc_cluster_group, inline="trim",  minval=0, maxval=31)

string osc_output_group = osc_group + " - Composite Post Smoothing"
string osc_post_smooth_filt = input.string("PhiSmoother", "PostSmooth - Filter:", group=osc_output_group, inline="post", options=["PhiSmoother", "EMA", "DEMA", "TEMA", "WMA", "SMA"])
int    osc_post_smooth_len  = input.int   (            1,            "Length:", group=osc_output_group, inline="post",  minval=1)

string osc_signal_group = osc_group + " - Composite Signal Settings"
string osc_signal_filter = input.string("PhiSmoother", "Signal - Filter:", group=osc_signal_group, inline="signal", options=["PhiSmoother", "EMA", "DEMA", "TEMA", "WMA", "SMA"])
int    osc_signal_length = input.int   (           20,        "Length:", group=osc_signal_group, inline="signal",  minval=1)
color  osc_signal_color  = input.color (    color.new(color.green, 0),     "Filter Color", group=osc_signal_group)

string osc_threshold_group = osc_group + " - Threshold Levels"
float osc_upperLevel = input.float( 75.00, "Levels - Upper:", group=osc_threshold_group, inline="level", minval=  1.0, maxval=99.0, step=2.0)
float osc_lowerLevel = input.float(-75.00,        "Lower:", group=osc_threshold_group, inline="level", minval=-99.0, maxval=-1.0, step=2.0)

string osc_colors_group = osc_group + " - Coloring Preferences"
float osc_transition_easing  = input.float(     50.0,    "Transition Easing", group=osc_colors_group, maxval=  100.0, minval=0.0, step=5.0)
bool  osc_fill_bg            = input.bool (     true, "Fill Background", group=osc_colors_group, inline= "fill")
int   osc_fill_alpha         = input.int  (       85,                     "", group=osc_colors_group, inline= "fill", minval=0, maxval=100)
color osc_rising_bullish     = input.color(#FFCC00,     "Bullish Color", group=osc_colors_group, inline= "bull")
color osc_rising_transition  = input.color(#9598A1,     "Transition Color", group=osc_colors_group, inline="range")
color osc_falling_bearish    = input.color(#5500CC,     "Bearish Color", group=osc_colors_group, inline= "bear")

// --- VWAP Z-Score Inputs ---
string zscore_group = "--- VWAP Z-SCORE SETTINGS ---"
int zscore_len = input.int(20, title="VWAP Z-Score Length",group =zscore_group )
float zscore_upper_top = input.float(3.0, title="Upper Threshold Top",group =zscore_group)
float zscore_upper_bottom = input.float(2.5, title="Upper Threshold Bottom",group =zscore_group)
float zscore_lower_top = input.float(-3.0, title="Lower Threshold Top",group =zscore_group)
float zscore_lower_bottom = input.float(-2.5, title="Lower Threshold Bottom",group =zscore_group)
bool zscore_showSignals = input.bool(true,title = "Show Reversal Signals",group =zscore_group)
color zscore_color_above_zero = input.color(color.new(#7FFF00, 0),title="Line Color ",inline = "visual",group =zscore_group)
color zscore_color_below_zero = input.color(color.new(#FF00FF, 0),title=" ",inline = "visual",group =zscore_group)
string zscore_buy_symbol = input.string("ðŸ”¼", "Buy Symbol", options=["ðŸ”¼", "BULL", "AGRESSIVE BULL"], group=zscore_group)
string zscore_sell_symbol = input.string("ðŸ”½", "Sell Symbol", options=["ðŸ”½", "BEAR", "AGRESSIVE BEAR"], group=zscore_group)

//==============================================================================
// MAIN SCRIPT LOGIC
//==============================================================================

// --- Oscillator Logic ---
if show_main_oscillator
    var VOLATILITY_MODE_ON = osc_mode == "Volatility"

    array<float> filter_cluster = array.new<float>(34)
    filter_cluster.set( 0,        osc_source)
    for i = 1 to 33
        filter_cluster.set( i, osc_filter(osc_source, i * osc_spacing, osc_phase, osc_filter_type))

    if osc_upper_trim > 0
        for i=0 to math.min(osc_upper_trim - 1, filter_cluster.size() - 1)
            if  filter_cluster.size() > 2
                filter_cluster.shift()
            else
                break
    if osc_lower_trim > 0
        for i=0 to math.min(osc_lower_trim - 1, filter_cluster.size() - 1)
            if  filter_cluster.size() > 2
                filter_cluster.pop()
            else
                break

    float ribbon_max   = filter_cluster.max()
    float ribbon_min   = filter_cluster.min()
    float ribbon_width = ribbon_max - ribbon_min
    float ribbon_rank  = VOLATILITY_MODE_ON ? nz(ribbon_width / math.avg(ribbon_max, ribbon_min)) : 1

    array<float> score = filter_cluster.get_score()
    float    net_score = osc_filter(score.net_score() * ribbon_rank, osc_post_smooth_len, 3.7, osc_post_smooth_filt)
    float signal_value = osc_signal_length < 2 ? na : osc_filter(ta.sma(net_score, 2), osc_signal_length, 3.7, osc_signal_filter)

    top    = hline(VOLATILITY_MODE_ON ? na :      100.0,    "Top",       color.red)
    upper  = hline(VOLATILITY_MODE_ON ? na : osc_upperLevel, "+Level",  osc_rising_bullish, hline.style_dotted, 2)
    center = hline(                                 0.0, "Center",       color.gray)
    lower  = hline(VOLATILITY_MODE_ON ? na : osc_lowerLevel, "+Level", osc_falling_bearish, hline.style_dotted, 2)
    bottom = hline(VOLATILITY_MODE_ON ? na :     -100.0, "Bottom",       color.green)

    fill(top, upper, color=color.new(color.red, 80))
    fill(center, upper, color=color.new(osc_rising_bullish, osc_fill_bg ? osc_fill_alpha : 100))
    fill(center, lower, color=color.new(osc_falling_bearish, osc_fill_bg ? osc_fill_alpha : 100))
    fill(bottom, lower, color=color.new(color.green, 80))

    color1 = net_score>signal_value ? color.green : color.red

    plot(net_score, "Score", color1, 3)
    plot(signal_value, "Signal", osc_signal_color, 1)

// --- VWAP Z-Score Logic ---
if show_zscore_indicator
    zscore_zvwap_val = zscore_calc_zvwap_enhanced(zscore_len)

    zscore_ub_high = plot(zscore_upper_top, title="Overbought High", color=color.new(color.red, 100), editable=false)
    zscore_ub_low = plot(zscore_upper_bottom, title="Overbought Low", color=color.new(color.red, 100), editable=false)
    fill(zscore_ub_high, zscore_ub_low, color=color.new(color.red, 90))

    zscore_os_high = plot(zscore_lower_top, title="Oversold High", color=color.new(color.green, 100), editable=false)
    zscore_os_low = plot(zscore_lower_bottom, title="Oversold Low", color=color.new(color.green, 100), editable=false)
    fill(zscore_os_high, zscore_os_low, color=color.new(color.green, 90))

    plot(zscore_zvwap_val, title="ZVWAP",
         color=zscore_zvwap_val >= 0 ? zscore_color_above_zero : zscore_color_below_zero,
         linewidth=2)

    zscore_alert_condition_up = zscore_zvwap_val > zscore_upper_bottom
    zscore_alert_condition_down = zscore_zvwap_val < zscore_lower_bottom

    y_location_down = zscore_alert_condition_down and zscore_showSignals ? zscore_zvwap_val - 1.2 : na
    y_location_up = zscore_alert_condition_up and zscore_showSignals ? zscore_zvwap_val + 0.3 : na
    plotshape(y_location_down, title="Support Signal", style=shape.labelup, location=location.absolute, color=color.green, text=zscore_buy_symbol, textcolor=color.white)
    plotshape(y_location_up, title="Resistance Signal", style=shape.labeldown, location=location.absolute, color=color.red, text=zscore_sell_symbol, textcolor=color.white)

    alertcondition(condition = zscore_alert_condition_down,title="VWAP Z-Score Buy", message="ZVWAP crossed above resistance")
    alertcondition(condition = zscore_alert_condition_up, title="VWAP Z-Score Sell", message="ZVWAP crossed below support")
